from typing import Dict, Any, List
from langchain.tools import BaseTool
from utils.database_utils import get_db_connection 
from langchain.prompts import ChatPromptTemplate
from langchain.chat_models import init_chat_model
from langchain_core.output_parsers import PydanticOutputParser
from langchain_community.utilities import SQLDatabase # For interacting with SQL database
from config.config_loader import load_config # Config loader

# Load configuration
config = load_config()

class SQLDatabaseTool(BaseTool):
    """Tool to execute SQL queries dynamically generated by an LLM and retrieve results from the database."""

    name = "sql_database_query"
    description = (
        "Useful for retrieving structured information from the mall database by executing SQL queries generated by an LLM. "
        "Input should be a natural language query describing what structured data to retrieve. "
        "The tool will use an LLM to generate a SQL query based on the database schema and then execute it against Neon Postgres. "
        "Use this for complex queries, listing information, or when precise filtering and aggregation are needed. "
        "LLM will attempt to generate valid SQL, but ensure the query is relevant to the database schema."
    )

    def _run(self, query_description: str) -> str: # Input is now a query description
        """Use an LLM to generate and execute SQL queries against the Neon Postgres database based on a natural language description."""
        print(f"--- SQLDatabaseTool: Running with query description: {query_description} ---")

        neon_conn = get_db_connection()
        if not neon_conn:
            return "Error: Could not connect to the Neon Postgres database."

        try:
            db = SQLDatabase(neon_conn) # Initialize SQLDatabase with Neon connection

            # --- 1. LLM SQL Query Generation ---
            print("Generating SQL query using LLM...")
            llm = init_chat_model(model="gemma2-9b-it", model_provider="groq")

            # Construct Prompt for SQL Generation
            prompt = ChatPromptTemplate.from_messages(
                [
                    (
                        "system",
                        """
                            You are a SQL query generator expert for a PostgreSQL database.
                            Your task is to generate valid SQL queries based on user's natural language questions about mall data.
                            You have access to the following database schema information:

                            ```sql
                            {table_info}
                            ```

                            Use ONLY the tables and columns described in the schema information.
                            Do NOT make assumptions about table names or column names that are not explicitly provided.
                            Generate SELECT queries to retrieve the requested information.
                            Be precise and ensure the generated SQL is valid PostgreSQL.
                            Return ONLY the SQL query as plain text, do not include any explanations or other text.
                            """,
                    ),
                    ("human", "{query_description}"), # User query description as human input
                ]
            )

            # Create chain for SQL generation
            sql_generation_chain = prompt | llm # Simple chain: Prompt -> LLM

            # Get table information string from SQLDatabase - IMPORTANT: pass only relevant tables for context
            table_names_for_context = ["malls", "stores", "offers", "events", "services"] # Add relevant table names for context
            table_info_string = db.get_table_info(table_names=table_names_for_context) # Get info for specific tables only


            # Invoke the SQL generation chain with query description and table info
            llm_sql_query = sql_generation_chain.invoke({"query_description": query_description, "table_info": table_info_string})


            sql_query_to_execute = llm_sql_query.content # Extract generated SQL query from LLM response

            print(f"Generated SQL Query from LLM:\n{sql_query_to_execute}") # Print the generated SQL

            # --- 2. Execute Generated SQL Query ---
            print("Executing generated SQL query against Neon Postgres...")
            with neon_conn.cursor() as cur:
                cur.execute(sql_query_to_execute)
                results = cur.fetchall()
                column_names = [desc[0] for desc in cur.description]

                if not results:
                    return "No results found for the SQL query."

                output_string = "SQL Query Results:\n\n"
                output_string += "| " + " | ".join(column_names) + " |\n"
                output_string += "| " + " | ".join(["---"] * len(column_names)) + " |\n"

                for row in results:
                    row_str = "| " + " | ".join([str(val) for val in row]) + " |\n"
                    output_string += row_str

                print("SQLDatabaseTool Results:\n", output_string)
                return output_string

        except Exception as e:
            error_message = f"Error during SQL query generation or execution: {e}"
            print(error_message)
            return error_message
        finally:
            neon_conn.close()

    async def _arun(self, query: str) -> str:
        """Asynchronous run method (not implemented)."""
        raise NotImplementedError("Async _arun method not implemented for SQLDatabaseTool.")